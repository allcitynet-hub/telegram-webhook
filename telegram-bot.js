const express = require('express');
const axios = require('axios');
const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN || '1298834121:AAH9R2V0I0wxwvq9SBObflJDgtognF6X8Y4';
const BOT_USERNAME = '@Allcitynet_bot';

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// CORS middleware
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');

    if (req.method === 'OPTIONS') {
        res.sendStatus(200);
    } else {
        next();
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId, text, parseMode = 'HTML') {
    try {
        const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            chat_id: chatId,
            text: text,
            parse_mode: parseMode,
            disable_web_page_preview: true
        });
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data || error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
async function getChatInfo(chatId) {
    try {
        const response = await axios.get(`https://api.telegram.org/bot${BOT_TOKEN}/getChat`, {
            params: { chat_id: chatId }
        });
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:', error.response?.data || error.message);
        return null;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
app.post('/webhook', async (req, res) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º OK, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
        res.status(200).send('OK');

        const update = req.body;
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', JSON.stringify(update, null, 2));

        if (update.message) {
            const message = update.message;
            const chatId = message.chat.id;
            const text = message.text || '';
            const username = message.from.username || message.from.first_name;

            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username} (${chatId}): ${text}`);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
            try {
                if (text.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç') || text.toLowerCase().includes('hello')) {
                    await sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, ${username}! –Ø –±–æ—Ç Allcitynet Portal. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∑–∞—è–≤–∫–∞—Ö!`);
                } else if (text.toLowerCase().includes('—Å—Ç–∞—Ç—É—Å') || text.toLowerCase().includes('—Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏')) {
                    await sendMessage(chatId, `üìä –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ—Ä—Ç–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø—Ä—è–º—É—é.`);
                } else if (text.toLowerCase().includes('–ø–æ–º–æ—â—å') || text.toLowerCase().includes('help')) {
                    await sendMessage(chatId, `üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Allcitynet Portal

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –ü—Ä–∏–≤–µ—Ç - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ –°—Ç–∞—Ç—É—Å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–æ–∫
‚Ä¢ –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö.

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –ø–æ—Ä—Ç–∞–ª–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
                } else if (text.toLowerCase().includes('–∑–∞—è–≤–∫–∞') || text.toLowerCase().includes('–Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞')) {
                    await sendMessage(chatId, `üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–∞—Ö

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª Allcitynet Portal.

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞

üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à username –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.`);
                } else {
                    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await sendMessage(chatId, `ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!

–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö.

üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å" –∏–ª–∏ "help".`);
                }
            } catch (sendError) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', sendError);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
app.get('/setup-webhook', async (req, res) => {
    try {
        const webhookUrl = req.query.url;
        if (!webhookUrl) {
            return res.status(400).json({
                error: 'URL webhook –Ω–µ —É–∫–∞–∑–∞–Ω',
                usage: 'GET /setup-webhook?url=YOUR_WEBHOOK_URL'
            });
        }

        const result = await setupWebhook(webhookUrl);
        res.json({
            success: true,
            message: 'Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            data: result
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
async function setupWebhook(webhookUrl) {
    try {
        console.log('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook...');
        const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
            url: webhookUrl
        });
        console.log('Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', response.data);
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.response?.data || error.message);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
async function getBotInfo() {
    try {
        const response = await axios.get(`https://api.telegram.org/bot${BOT_TOKEN}/getMe`);
        console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', response.data);
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error.response?.data || error.message);
        return null;
    }
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
app.get('/status', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
        const botInfo = await getBotInfo();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        const webhookInfo = await axios.get(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);

        res.json({
            success: true,
            bot: botInfo,
            webhook: webhookInfo.data,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.send(`
        <h1>ü§ñ Allcitynet Portal Telegram Bot</h1>
        <p><b>–°—Ç–∞—Ç—É—Å:</b> –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel</p>
        <p><b>–ë–æ—Ç:</b> ${BOT_USERNAME}</p>
        <p><b>Webhook URL:</b> ${req.protocol}://${req.get('host')}/webhook</p>
        <hr>
        <h2>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</h2>
        <ul>
            <li><b>–ü—Ä–∏–≤–µ—Ç</b> - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</li>
            <li><b>–°—Ç–∞—Ç—É—Å</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–æ–∫</li>
            <li><b>–ü–æ–º–æ—â—å</b> - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</li>
            <li><b>–ó–∞—è–≤–∫–∞</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–∞—Ö</li>
        </ul>
        <hr>
        <h2>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook:</h2>
        <p>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</p>
        <code>GET /setup-webhook?url=YOUR_WEBHOOK_URL</code>
        <hr>
        <p><i>–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.</i></p>
    `);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel
module.exports = app;

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if (process.env.NODE_ENV !== 'production') {
    const PORT = process.env.PORT || 3000;

    app.listen(PORT, async () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üåê Webhook URL: http://localhost:${PORT}/webhook`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        await getBotInfo();

        console.log('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        console.log('üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
    process.exit(1);
});
