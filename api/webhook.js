export default async function handler(req, res) {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    console.log('Headers:', req.headers);
    
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('Access-Control-Max-Age', '86400');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞
    if (req.method === 'OPTIONS') {
        res.status(204).end();
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞
    if (req.method === 'GET') {
        const { test } = req.query;
        
        if (test) {
            try {
                const token = process.env.TELEGRAM_BOT_TOKEN || '5007226500:AAG4uJqSHGxCNl_eU7DGNqc7bXwrXm-Qcj4';
                const chatId = process.env.TELEGRAM_CHAT_ID || '-1001254716887';
                
                const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: Vercel GET-ok',
                        parse_mode: 'HTML'
                    })
                });
                
                const result = await response.json();
                res.status(200).json(result);
            } catch (error) {
                console.error('GET error:', error);
                res.status(500).json({ error: error.message });
            }
            return;
        }
        
        res.status(200).json({ message: 'OK' });
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞
    if (req.method === 'POST') {
        try {
            let text = '';
            let recipient = null;
            let isUserNotification = false;
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            if (req.headers['content-type']?.includes('application/json')) {
                text = req.body?.text || req.body?.message || '';
                recipient = req.body?.recipient || null;
                isUserNotification = req.body?.type === 'user_notification';
            } else {
                text = req.body || '';
            }
            
            if (!text) {
                res.status(400).json({ error: 'No text provided' });
                return;
            }
            
            const token = process.env.TELEGRAM_BOT_TOKEN || '5007226500:AAG4uJqSHGxCNl_eU7DGNqc7bXwrXm-Qcj4';
            
            // –ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (isUserNotification && recipient) {
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è: ${recipient}`);
                
                // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    // –î–ª—è username (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)
                    if (recipient.startsWith('@')) {
                        const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                chat_id: recipient, // Telegram API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç username –∫–∞–∫ chat_id
                                text: text,
                                parse_mode: 'HTML'
                            })
                        });
                        
                        const result = await response.json();
                        
                        if (result.ok) {
                            console.log(`‚úÖ –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${recipient}`);
                            return res.status(200).json(result);
                        } else {
                            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${recipient}: ${result.description}`);
                            // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç
                        }
                    }
                    
                    // –î–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –µ—Å–ª–∏ username –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    if (recipient.startsWith('+') || !recipient.startsWith('@')) {
                        console.log(`üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ fallback): ${recipient}`);
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${recipient}:`, error);
                    // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç
                }
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç (fallback –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            const chatId = process.env.TELEGRAM_CHAT_ID || '-1001254716887';
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç: ${chatId}`);
            
            const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: chatId,
                    text: text,
                    parse_mode: 'HTML'
                    })
            });
            
            const result = await response.json();
            res.status(200).json(result);
            
        } catch (error) {
            console.error('POST error:', error);
            res.status(500).json({ 
                error: 'Internal error', 
                details: error.message 
            });
        }
        return;
    }
    
    // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥
    res.status(405).json({ error: 'Method not allowed' });
}
